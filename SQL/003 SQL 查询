SFJOWGHO

Study Route:
Query-->Datetime -->Variable-->Exp-->Func-->Query-->View-->SP-->PT

SQL--两种
DDL  Data Define language
DML  manipulation language

baisc:
Data: CRUD 增删查改
集合操作 子交并补
Stat. 大小集合均
join 内外交


query：
查询模板SFJOWGHO
select from 
join on 
where 
group by 
having 
order by


scama;  表前面有 **.  安全隔离
eg: product.Name
eg:sale.Name

有[]，[]里面的字不算关键字

大小写不敏感

----------------select-------------------from--------------------------------------------------------------
--[]避免关键字
select * from [Person].[Person]--不建议
select top 100 * from [Person].[Person]

select top 10 [FirstName],[MiddleName],[LastName] 
from [Person].[Person]

select distinct [FirstName]
from [Person].[Person]

--不整除取floor
select top 10 percent [FirstName]  
from [Person].[Person]

--权限命名，可以省略，最好不省略
select P.[FirstName]  
from [Person].[Person] As P

--修改别名
select [FirstName] as [FN]  
from [Person].[Person] As P

----------------where------------------操作符---------------------------------------------------------------
select [FirstName],[LastName]
from [Person].[Person]
where [FirstName]<>'John'

select [FirstName],[LastName]
from [Person].[Person]
where [FirstName] like 'Tim%'

select [FirstName],[LastName]
from [Person].[Person]
where [FirstName] like '_im%'
--_任意一个字符

select [FirstName],[LastName]
from [Person].[Person]
where [FirstName] like '_[tk]m%'
--_任意一个字符+[tk]其中之一+m+其他

select [FirstName],[LastName]
from [Person].[Person]
where [FirstName] like '^[tk]m%'
--^不包括[tk]


----------------where------------------操作符---------------------------------------------------------------
操作符本质是函数简记法
select [FirstName]+' '+[LastName] as [FullName]
from [Person].[Person]

----------------where------------------函数---------------------------------------------------------------
自带几千函数
一类 聚合函数 stat
一类 单值函数 Scala
select concat([FirstName],' '，[LastName])as [FullName]
from [Person].[Person]

SQL index 从1开始
Scala函数:
select SUBSTRING('Timothy',1,3)
统计函数:
select max(SubTotal) from Sales.SalesOrderHeader
select min(SubTotal) from Sales.SalesOrderHeader
select count(SalesOrderID) from Sales.SalesOrderHeader
select sum(SubTotal) from Sales.SalesOrderHeader
select avg(SubTotal) from Sales.SalesOrderHeader


----------------order by---------------------------------------------------------------------------------
select [FirstName],[LastName]
from [Person].[Person]
order by [FirstName],[LastName]

select [FirstName],[LastName]
from [Person].[Person]
order by [FirstName],[LastName] desc

--asc可以省略
select [FirstName],[LastName]
from [Person].[Person]
order by [FirstName] desc,[LastName] asc


----------------join---------------------------------------------------------------------------------
多表查询，为了避免表里面数据有重复，分开存储
--join 目的从多张表中查询数据
--结果 把多张表形成一张虚拟的大表

select sod.ProductID,sod.LineTotal 
from Sales.SalesOrderDetail as sod

select p.ProductID,p.Name 
from Production.Product as p
order by p.ProductID

select p.ProductID,p.Name,sod.LineTotal
from Sales.SalesOrderDetail as sod
join Production.Product as p 
on sod.ProductID=p.ProductID
-- 默认inner

left join
right join

select p.ProductID,p.Name,sod.LineTotal
from Sales.SalesOrderDetail as sod
right join Production.Product as p 
on sod.ProductID=p.ProductID

A left join B left join C
(A) left
(A left join B) left
SQL 执行顺序从左向右

----------------group by---------------------------------------------------------------------------------
聚合函数只要给一组值都可以得到返回值
大部分是和group by一起使用
但是没必要一定和group by 一起使用
分组一定聚合，聚合不一定分组

--T-SQL order by 无论何时都可以使用别名
select FirstName,count(LastName) as Frequency
from Person.Person
group by FirstName
order by Frequency

select FirstName,count(LastName) as Frequency
from Person.Person
group by FirstName
--wherer  Frequency>=100  where 是对数据源处理的，这里不能用where
--having Frequency>=100  T-SQL 这里不能使用别名,但是可以使用数据源的别名，
having count(LastName)>=90
order by Frequency desc


with temp as(
select FirstName,count(LastName) as Frequency
from Person.Person
group by FirstName
)
select * from temp where Frequency>=90


-------------如下两段作用一样-------------------------------------------------------
with temp as (
select s.Name ,BA.AddressID as AddressID
from Sales.Store as S
join [Person].[BusinessEntityAddress] as BA
on s.BusinessEntityID=BA.BusinessEntityID 
)
select PA.AddressLine1,PA.City,t.Name
from [Person].[Address] as PA
join temp as T
on T.AddressID=PA.AddressID


Select s.Name,a.AddressLine1,a.City
from Sales.Store as s
join Person.BusinessEntityAddress as bea on s.BusinessEntityID=bea.BusinessEntityID
join person.Address as a on bea.AddressID=a.AddressID
